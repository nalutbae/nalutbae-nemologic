package com.story4g.nalutbae.nemologic;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.Assert.assertEquals;

public class NemoLogicSolverTest {
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
    }

    @Test
    public void test5x5() {
        int[][] rowsHints = {{1, 1}, {1, 1, 1}, {1, 1}, {1, 1}, {1}};
        int[][] columnHints = {{2}, {1, 1}, {1, 1}, {1, 1}, {2}};

        NemoLogicSolver solver = new NemoLogicSolver(rowsHints, columnHints);
        solver.process();

        String expectedOutput =
                        "□■□■□\n" +
                        "■□■□■\n" +
                        "■□□□■\n" +
                        "□■□■□\n" +
                        "□□■□□";
        assertEquals(expectedOutput, outContent.toString().trim());
    }

    @Test
    public void test10x10() {
        int[][] rowsHints = {{10}, {2, 3, 3}, {2, 3, 3}, {1, 1}, {1, 1, 1, 1}, {2, 2}, {4, 4}, {4, 4}, {3, 3}, {3, 3}};
        int[][] columnHints = {{10}, {3, 5}, {1, 4}, {3, 1, 2}, {3}, {3}, {1, 1, 2}, {3, 4}, {3, 5}, {10}};

        NemoLogicSolver solver = new NemoLogicSolver(rowsHints, columnHints);
        solver.process();

        String expectedOutput =
                "■■■■■■■■■■\n" +
                "■■□■■■□■■■\n" +
                "■■□■■■□■■■\n" +
                "■□□□□□□□□■\n" +
                "■□□■□□■□□■\n" +
                "■■□□□□□□■■\n" +
                "■■■■□□■■■■\n" +
                "■■■■□□■■■■\n" +
                "■■■□□□□■■■\n" +
                "■■■□□□□■■■";
        assertEquals(expectedOutput, outContent.toString().trim());
    }

    @Test
    public void test20x20() {
        int[][] rowsHints = {{3, 3}, {10}, {2, 4, 2}, {2, 2, 2}, {2}, {2}, {10}, {2, 2}, {2, 2, 2, 1}, {2, 3, 6}, {1, 5, 1, 1}, {1, 3, 1, 2}, {1, 1, 1, 3, 1}, {1, 3, 2, 1}, {1, 1}, {1, 1}, {17, 2}, {2, 3}, {15}, {12}};
        int[][] columnHints = {{8}, {2, 2}, {2, 3}, {3, 2, 3, 1, 2}, {4, 1, 3, 1, 1, 2}, {2, 1, 3, 1, 1, 2}, {3, 1, 2, 1, 1, 2}, {6, 3, 1, 2}, {6, 1, 2}, {3, 1, 1, 2}, {2, 1, 1, 2}, {4, 1, 1, 2}, {3, 2, 1, 2}, {2, 1, 2}, {2, 1, 2}, {4, 1, 1}, {2, 3, 3}, {2, 2, 1}, {2, 2}, {2, 5}};

        NemoLogicSolver solver = new NemoLogicSolver(rowsHints, columnHints);
        solver.process();

        String expectedOutput =
                "□□□□■■■□□■■■□□□□□□□□\n" +
                "□□□■■■■■■■■■■□□□□□□□\n" +
                "□□□■■□■■■■□■■□□□□□□□\n" +
                "□□□■■□□■■□□■■□□□□□□□\n" +
                "□□□□□□□■■□□□□□□□□□□□\n" +
                "□□□□□□□■■□□□□□□□□□□□\n" +
                "□□□■■■■■■■■■■□□□□□□□\n" +
                "□□■■□□□□□□□□■■□□□□□□\n" +
                "□■■□□□□□□□□□□■■□■■□■\n" +
                "■■□□■■■□□□□□□□■■■■■■\n" +
                "■□□■■■■■□□□□□□□■□□■□\n" +
                "■□□■■■□■□□□□□□□■■□□□\n" +
                "■□□■□□□■□□□□□□□■■■□■\n" +
                "■□□□■■■□□□□□□□□□■■□■\n" +
                "■□□□□□□□□□□□□□□□□□□■\n" +
                "■□□□□□□□□□□□□□□□□□□■\n" +
                "■■■■■■■■■■■■■■■■■□■■\n" +
                "□■■□□□□□□□□□□□□□■■■□\n" +
                "□□■■■■■■■■■■■■■■■□□□\n" +
                "□□□■■■■■■■■■■■■□□□□□";
        assertEquals(expectedOutput, outContent.toString().trim());
    }

    @Test
    public void test25x20() {
        int[][] rowsHints = {{15}, {7, 7, 14}, {7, 7, 14}, {7, 7, 2, 2, 2}, {1, 2, 2, 2, 2}, {7, 7, 2, 2, 2}, {6, 2, 5, 14}, {5, 3, 1, 3, 14}, {6, 1, 2, 3, 2, 2, 2}, {7, 2, 4, 2, 2, 2}, {6, 2, 5, 2, 2, 2}, {5, 2, 6, 14}, {4, 2, 1, 5, 14}, {3, 2, 2, 5, 2}, {5, 2, 5, 2}, {5, 3, 5, 2}, {1, 3, 3, 3, 1, 2}, {1, 3, 3, 3, 1, 2}, {1, 3, 1, 2}, {15}};
        int[][] columnHints = {{20}, {4, 11, 1}, {4, 13, 1}, {4, 8, 4, 1}, {4, 7, 5, 1}, {4, 2, 3, 2, 1}, {4, 1, 1, 1, 2, 5}, {1, 3, 2, 7}, {4, 3, 2, 8}, {4, 1, 2, 1, 1}, {4, 4, 8, 1}, {4, 2, 9, 1}, {4, 13, 1}, {16, 1}, {20}, {0}, {12}, {12}, {2, 2, 2}, {2, 2, 2}, {2, 2, 2}, {2, 2, 2}, {18}, {18}, {2, 2, 2}, {2, 2, 2}, {2, 2, 2}, {2, 2, 2}, {12}, {12}};

        NemoLogicSolver solver = new NemoLogicSolver(rowsHints, columnHints);
        solver.process();

        String expectedOutput =
                "□■■■■■■■■■■■■■■■□□□□□□□□□□□□□□\n" +
                "■■■■■■■□■■■■■■■□■■■■■■■■■■■■■■\n" +
                "■■■■■■■□■■■■■■■□■■■■■■■■■■■■■■\n" +
                "■■■■■■■□■■■■■■■□■■□□□□■■□□□□■■\n" +
                "■□□□□□□□□□□□□■■□■■□□□□■■□□□□■■\n" +
                "■■■■■■■□■■■■■■■□■■□□□□■■□□□□■■\n" +
                "■■■■■■□■■□■■■■■□■■■■■■■■■■■■■■\n" +
                "■■■■■□■■■□■□■■■□■■■■■■■■■■■■■■\n" +
                "■■■■■■□■□■■□■■■□■■□□□□■■□□□□■■\n" +
                "■■■■■■■□■■□■■■■□■■□□□□■■□□□□■■\n" +
                "■■■■■■□■■□■■■■■□■■□□□□■■□□□□■■\n" +
                "■■■■■□■■□■■■■■■□■■■■■■■■■■■■■■\n" +
                "■■■■□■■□■□■■■■■□■■■■■■■■■■■■■■\n" +
                "■■■□■■□■■□■■■■■□□□□□□□■■□□□□□□\n" +
                "■■■■■□□■■□■■■■■□□□□□□□■■□□□□□□\n" +
                "■■■■■□■■■□■■■■■□□□□□□□■■□□□□□□\n" +
                "■□■■■□■■■□■■■□■□□□□□□□■■□□□□□□\n" +
                "■□■■■□■■■□■■■□■□□□□□□□■■□□□□□□\n" +
                "■□□□□□■■■□□□□□■□□□□□□□■■□□□□□□\n" +
                "■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□";
        assertEquals(expectedOutput, outContent.toString().trim());
    }

    @Test
    public void test30x30() {
        int[][] rowsHints = {{30}, {1, 1, 1, 1, 1, 1}, {4, 4}, {1, 1, 1, 1}, {2, 2, 2}, {1, 2, 1}, {1, 1, 4, 1}, {1, 3, 2, 1, 1}, {1, 1, 6, 1}, {1, 1, 2, 3, 1}, {1, 2, 3, 1}, {1, 3, 4, 1}, {1, 4, 1, 1}, {1, 6, 3, 1}, {1, 6, 1, 1}, {1, 2, 2, 2, 1, 1}, {1, 4, 1, 1}, {1, 2, 3, 3, 1}, {1, 1, 6, 1}, {1, 1, 3, 5, 2, 1, 1}, {1, 3, 12, 3, 1}, {1, 1, 1, 4, 1, 1, 1}, {1, 1, 1, 8, 1, 1, 1}, {1, 1, 1, 8, 2, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 6, 1, 1, 1, 1}, {10, 2, 1, 12}, {1, 1, 6, 1, 1, 1}, {4, 5, 4}, {1, 1, 1, 1, 1, 1}, {30}};
        int[][] columnHints = {{30}, {1, 1, 1, 1, 1, 1}, {4, 5}, {1, 1, 6, 1, 1}, {2, 2, 1, 2}, {1, 1, 6, 1}, {1, 4, 1, 1}, {1, 1, 1, 1}, {1, 1, 1}, {1, 2, 4, 1}, {1, 4, 1, 1, 1}, {1, 2, 3, 2, 2, 1, 1}, {1, 4, 4, 1, 1, 1, 1}, {1, 4, 4, 2, 3, 4, 1}, {1, 5, 16, 1}, {1, 3, 2, 5, 8, 1, 1}, {1, 9, 8, 1, 1}, {1, 4, 3, 4, 1, 1, 1, 1}, {1, 2, 4, 1, 6, 1}, {1, 4, 2, 1, 1}, {1, 2, 1, 1, 1}, {1, 4, 1}, {1, 1, 1}, {1, 1, 1, 1}, {1, 4, 6, 1}, {2, 1, 2, 1, 2}, {1, 1, 6, 1, 1}, {4, 5}, {1, 1, 1, 1, 1, 1}, {30}};

        NemoLogicSolver solver = new NemoLogicSolver(rowsHints, columnHints);
        solver.process();

        String expectedOutput =
                "■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n" +
                "■□■□■□□□□□□□□□□□□□□□□□□□□■□■□■\n" +
                "■■■■□□□□□□□□□□□□□□□□□□□□□□■■■■\n" +
                "■□■□□□□□□□□□□□□□□□□□□□□□□□□■□■\n" +
                "■■□□□□□□□□□□□□■■□□□□□□□□□□□□■■\n" +
                "■□□□□□□□□□□□□□■■□□□□□□□□□□□□□■\n" +
                "■□□□□□■□□□□□□■■■■□□□□□□□□□□□□■\n" +
                "■□□□□■■■□□□□□■■□■□□□□□□□□□□□□■\n" +
                "■□□□□□■□□□□□■■■■■■□□□□□□□□□□□■\n" +
                "■□□□□□■□□□□□■■□■■■□□□□□□□□□□□■\n" +
                "■□□□□□□□□□□■■□□□■■■□□□□□□□□□□■\n" +
                "■□□□□□□□□□□■■■□■■■■□□□□□□□□□□■\n" +
                "■□□□□□□□□□□□□■■■■□□□□□□□■□□□□■\n" +
                "■□□□□□□□□□□□■■■■■■□□□□□■■■□□□■\n" +
                "■□□□□□□□□□□□■■■■■■□□□□□□■□□□□■\n" +
                "■□□□□□□□□□□■■□■■□■■□□□□□■□□□□■\n" +
                "■□□□□□□□□□□■■■■□□□■□□□□□□□□□□■\n" +
                "■□□□□□□□□□■■□■■■□■■■□□□□□□□□□■\n" +
                "■□□□□□□□□□■□□□■■■■■■□□□□□□□□□■\n" +
                "■□□□■□□□□■■■□■■■■■□■■□□□□■□□□■\n" +
                "■□□■■■□□□■■■■■■■■■■■■□□□■■■□□■\n" +
                "■□□■□■□□□□□□□■■■■□□□□□□□■□■□□■\n" +
                "■□□■□■□□□□□□□□■■■■■■■■□□■□■□□■\n" +
                "■□□■□■□□□■■■■■■■■□■■□■□□■□■□□■\n" +
                "■□□■□■□□□■□■□■■■■■■□□■□□■□■□□■\n" +
                "■■■■■■■■■■□□□■■□■□■■■■■■■■■■■■\n" +
                "■□■□□□□□□■■■■■■□□□■□□□□□□□□■□■\n" +
                "■■■■□□□□□□□□□□■■■■■□□□□□□□■■■■\n" +
                "■□■□■□□□□□□□□□□□□□□□□□□□□■□■□■\n" +
                "■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■";
        assertEquals(expectedOutput, outContent.toString().trim());
    }

    @Test
    public void test40x40() {
        int[][] rowsHints = {{22, 10}, {17}, {21}, {5, 5, 6, 2}, {7, 5, 5, 4, 1}, {3, 5, 4, 1, 3, 1}, {8, 9, 6, 1}, {5, 5, 2, 3, 3, 2}, {3, 9, 2, 6, 4}, {2, 1, 7, 15}, {1, 1, 7, 1, 6}, {4, 5, 3}, {1, 2, 4, 4}, {1, 6, 2}, {2, 5, 2}, {4, 3, 2}, {2, 6, 3}, {2, 6, 4}, {3, 6, 2, 1}, {4, 6, 2, 3}, {2, 1, 6, 8}, {2, 2, 6, 2, 5}, {1, 3, 6, 2, 4, 1}, {2, 3, 6, 2, 4, 1}, {1, 5, 6, 1, 2}, {1, 3, 2, 6, 1, 2}, {4, 4, 6, 2, 1, 4}, {4, 9, 2, 2, 2, 2}, {3, 9, 2, 4, 2, 4}, {2, 18, 2, 5}, {1, 18, 7}, {24}, {22}, {19}, {15}, {5, 7}, {3, 6}, {2, 5, 1}, {1, 8}, {6}};
        int[][] columnHints = {{1, 1, 4}, {1, 1, 5}, {1, 2, 2, 3}, {1, 2, 3, 3}, {1, 3, 3, 3}, {1, 1, 1, 3, 4}, {1, 2, 2, 3, 4, 1}, {1, 1, 4, 11}, {1, 1, 7, 2, 3}, {1, 1, 4, 5, 7, 2}, {1, 5, 3, 12, 2}, {1, 3, 1, 3, 15}, {1, 2, 4, 3, 15}, {1, 1, 6, 19}, {1, 29}, {1, 12, 9}, {1, 11, 8}, {1, 4, 5, 4, 7}, {1, 2, 1, 3, 8, 6}, {1, 7, 3, 2, 6}, {1, 3, 2, 2, 2, 9}, {1, 2, 2, 1, 1, 3, 9}, {2, 2, 1, 2, 4, 9}, {5, 2, 8, 10}, {4, 3, 2, 4, 8}, {4, 1, 1, 2, 2, 8}, {3, 1, 1, 2, 1, 10}, {4, 1, 2, 2, 8}, {4, 1, 2, 1, 8}, {3, 1, 3, 1, 7}, {3, 1, 5, 1, 7}, {3, 1, 4, 10}, {3, 1, 4, 1, 10}, {3, 1, 2, 7, 4}, {3, 1, 2, 1, 5, 3}, {3, 3, 6, 2}, {3, 2, 1, 4, 2}, {2, 1, 5, 2}, {3, 2, 5, 2}, {6, 5}};

        NemoLogicSolver solver = new NemoLogicSolver(rowsHints, columnHints);
        solver.process();

        String expectedOutput =
                "■■■■■■■■■■■■■■■■■■■■■■□□□□□■■■■■■■■■■□□□\n" +
                "□□□□□□□□□□□□□□□□□□□□□□■■■■■■■■■■■■■■■■■□\n" +
                "□□□□□□□□□□□□□□□□□□□■■■■■■■■■■■■■■■■■■■■■\n" +
                "□□□□□□■■■■■□□□□□□■■■■■□■■■■■■□□□□□□□□□■■\n" +
                "■■■■■■■□□□■■■■■□■■■■■□■■■■□□□□□□□□□□□□□■\n" +
                "□□■■■□□□■■■■■□■■■■□■□■■■□□□□□□□□□□□□□□□■\n" +
                "□□□□■■■■■■■■□■■■■■■■■■□□□□□■■■■■■□□□□□□■\n" +
                "□□□□□□■■■■■□■■■■■□□■■□□□■■■□□□□□□■■■□□■■\n" +
                "□□□□□□□■■■□■■■■■■■■■□□□■■□□■■■■■■□□■■■■□\n" +
                "□□□□□□□■■□■□■■■■■■■□□□■■■■■■■■■■■■■■■□□□\n" +
                "□□□□□□□□■□■□■■■■■■■□□■□□□□□□□■■■■■■□□□□□\n" +
                "□□□□□□□□■■■■□■■■■■□□□□□□□□□□□□■■■□□□□□□□\n" +
                "□□□□□□□□□■□■■□■■■■□□□□□□□□□■■■■□□□□□□□□□\n" +
                "□□□□□□□□□■□■■■■■■□□□□□□□□□■■□□□□□□□□□□□□\n" +
                "□□□□□□□□□■■□■■■■■□□□□□□□□■■□□□□□□□□□□□□□\n" +
                "□□□□□□□□■■■■□■■■□□□□□□□□■■□□□□□□□□□□□□□□\n" +
                "□□□□□□□■■□■■■■■■□□□□□□■■■□□□□□□□□□□□□□□□\n" +
                "□□□□□□■■□■■■■■■□□□□□■■■■□□□□□□□□□□□□□□□□\n" +
                "□□□□□■■■□■■■■■■□□□□■■□□■□□□□□□□□□□□□□□□□\n" +
                "□□□□■■■■□■■■■■■□□□■■□■■■□□□□□□□□□□□□□□□□\n" +
                "□□□□■■□■□■■■■■■□□■■■■■■■■□□□□□□□□□□□□□□□\n" +
                "□□□■■□■■□■■■■■■□□■■□■■■■■□□□□□□□□□□□□□□□\n" +
                "□□□■□■■■□■■■■■■□□■■□□□■■■■□□□□□□□□□□□□□■\n" +
                "□□■■□■■■□■■■■■■□□■■□□□□■■■■□□□□□□□□□□□□■\n" +
                "□□■□■■■■■□■■■■■■□□■□□□□□□□□□□□□□□□□□□□■■\n" +
                "□■□■■■□■■□■■■■■■□□■□□□□□□□□□□□□□□□□□□□■■\n" +
                "□■■■■□■■■■□■■■■■■□■■□□□□□□■□□□□□□□□□■■■■\n" +
                "■■■■□□□□□■■■■■■■■■□■■□□□□■■□□□□□□□■■□■■□\n" +
                "■■■□□□□□□□■■■■■■■■■□■■□□■■■■□□□□■■□■■■■□\n" +
                "■■□□□□□□□□□■■■■■■■■■■■■■■■■■■□■■□■■■■■□□\n" +
                "■□□□□□□□□□□□■■■■■■■■■■■■■■■■■■□■■■■■■■□□\n" +
                "□□□□□□□□□□□□□■■■■■■■■■■■■■■■■■■■■■■■■□□□\n" +
                "□□□□□□□□□□□□□□■■■■■■■■■■■■■■■■■■■■■■□□□□\n" +
                "□□□□□□□□□□□□□□□□■■■■■■■■■■■■■■■■■■■□□□□□\n" +
                "□□□□□□□□□□□□□□□□□□□■■■■■■■■■■■■■■■□□□□□□\n" +
                "□□□□□□□□□□□□□□□□□□□□■■■■■□■■■■■■■□□□□□□□\n" +
                "□□□□□□□□□□□□□□□□□□□□□■■■□□□□■■■■■■□□□□□□\n" +
                "□□□□□□□□□□□□□□□□□□□□□□■■□□□□□□■■■■■□□□■□\n" +
                "□□□□□□□□□□□□□□□□□□□□□□□■□□□□□□□■■■■■■■■□\n" +
                "□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■□□";
        assertEquals(expectedOutput, outContent.toString().trim());
    }


}